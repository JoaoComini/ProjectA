// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_MESH_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "NativeVertex.hpp"

namespace flatbuffers {

struct Vertex;

struct Primitive;
struct PrimitiveBuilder;
struct PrimitiveT;

struct AABB;

struct Mesh;
struct MeshBuilder;
struct MeshT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vertex FLATBUFFERS_FINAL_CLASS {
 private:
  float position_[3];
  float normal_[3];
  float uv_[2];

 public:
  Vertex()
      : position_(),
        normal_(),
        uv_() {
  }
  Vertex(::flatbuffers::span<const float, 3> _position, ::flatbuffers::span<const float, 3> _normal, ::flatbuffers::span<const float, 2> _uv) {
    ::flatbuffers::CastToArray(position_).CopyFromSpan(_position);
    ::flatbuffers::CastToArray(normal_).CopyFromSpan(_normal);
    ::flatbuffers::CastToArray(uv_).CopyFromSpan(_uv);
  }
  const ::flatbuffers::Array<float, 3> *position() const {
    return &::flatbuffers::CastToArray(position_);
  }
  const ::flatbuffers::Array<float, 3> *normal() const {
    return &::flatbuffers::CastToArray(normal_);
  }
  const ::flatbuffers::Array<float, 2> *uv() const {
    return &::flatbuffers::CastToArray(uv_);
  }
};
FLATBUFFERS_STRUCT_END(Vertex, 32);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) AABB FLATBUFFERS_FINAL_CLASS {
 private:
  float min_[3];
  float max_[3];

 public:
  AABB()
      : min_(),
        max_() {
  }
  AABB(::flatbuffers::span<const float, 3> _min, ::flatbuffers::span<const float, 3> _max) {
    ::flatbuffers::CastToArray(min_).CopyFromSpan(_min);
    ::flatbuffers::CastToArray(max_).CopyFromSpan(_max);
  }
  const ::flatbuffers::Array<float, 3> *min() const {
    return &::flatbuffers::CastToArray(min_);
  }
  const ::flatbuffers::Array<float, 3> *max() const {
    return &::flatbuffers::CastToArray(max_);
  }
};
FLATBUFFERS_STRUCT_END(AABB, 24);

struct PrimitiveT : public ::flatbuffers::NativeTable {
  typedef Primitive TableType;
  uint64_t material = 0;
  std::vector<Engine::Vertex> vertices{};
  std::vector<uint8_t> indices{};
  int32_t index_type = 0;
};

struct Primitive FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PrimitiveT NativeTableType;
  typedef PrimitiveBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MATERIAL = 4,
    VT_VERTICES = 6,
    VT_INDICES = 8,
    VT_INDEX_TYPE = 10
  };
  uint64_t material() const {
    return GetField<uint64_t>(VT_MATERIAL, 0);
  }
  const ::flatbuffers::Vector<const flatbuffers::Vertex *> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffers::Vertex *> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint8_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_INDICES);
  }
  int32_t index_type() const {
    return GetField<int32_t>(VT_INDEX_TYPE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MATERIAL, 8) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           VerifyField<int32_t>(verifier, VT_INDEX_TYPE, 4) &&
           verifier.EndTable();
  }
  PrimitiveT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PrimitiveT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Primitive> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PrimitiveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PrimitiveBuilder {
  typedef Primitive Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_material(uint64_t material) {
    fbb_.AddElement<uint64_t>(Primitive::VT_MATERIAL, material, 0);
  }
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers::Vertex *>> vertices) {
    fbb_.AddOffset(Primitive::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> indices) {
    fbb_.AddOffset(Primitive::VT_INDICES, indices);
  }
  void add_index_type(int32_t index_type) {
    fbb_.AddElement<int32_t>(Primitive::VT_INDEX_TYPE, index_type, 0);
  }
  explicit PrimitiveBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Primitive> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Primitive>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Primitive> CreatePrimitive(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t material = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers::Vertex *>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> indices = 0,
    int32_t index_type = 0) {
  PrimitiveBuilder builder_(_fbb);
  builder_.add_material(material);
  builder_.add_index_type(index_type);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Primitive> CreatePrimitiveDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t material = 0,
    const std::vector<flatbuffers::Vertex> *vertices = nullptr,
    const std::vector<uint8_t> *indices = nullptr,
    int32_t index_type = 0) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<flatbuffers::Vertex>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint8_t>(*indices) : 0;
  return flatbuffers::CreatePrimitive(
      _fbb,
      material,
      vertices__,
      indices__,
      index_type);
}

::flatbuffers::Offset<Primitive> CreatePrimitive(::flatbuffers::FlatBufferBuilder &_fbb, const PrimitiveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MeshT : public ::flatbuffers::NativeTable {
  typedef Mesh TableType;
  std::vector<std::unique_ptr<flatbuffers::PrimitiveT>> primitives{};
  std::unique_ptr<flatbuffers::AABB> bounds{};
  MeshT() = default;
  MeshT(const MeshT &o);
  MeshT(MeshT&&) FLATBUFFERS_NOEXCEPT = default;
  MeshT &operator=(MeshT o) FLATBUFFERS_NOEXCEPT;
};

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshT NativeTableType;
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRIMITIVES = 4,
    VT_BOUNDS = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::Primitive>> *primitives() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::Primitive>> *>(VT_PRIMITIVES);
  }
  const flatbuffers::AABB *bounds() const {
    return GetStruct<const flatbuffers::AABB *>(VT_BOUNDS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRIMITIVES) &&
           verifier.VerifyVector(primitives()) &&
           verifier.VerifyVectorOfTables(primitives()) &&
           VerifyField<flatbuffers::AABB>(verifier, VT_BOUNDS, 4) &&
           verifier.EndTable();
  }
  MeshT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MeshT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Mesh> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_primitives(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::Primitive>>> primitives) {
    fbb_.AddOffset(Mesh::VT_PRIMITIVES, primitives);
  }
  void add_bounds(const flatbuffers::AABB *bounds) {
    fbb_.AddStruct(Mesh::VT_BOUNDS, bounds);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<flatbuffers::Primitive>>> primitives = 0,
    const flatbuffers::AABB *bounds = nullptr) {
  MeshBuilder builder_(_fbb);
  builder_.add_bounds(bounds);
  builder_.add_primitives(primitives);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<flatbuffers::Primitive>> *primitives = nullptr,
    const flatbuffers::AABB *bounds = nullptr) {
  auto primitives__ = primitives ? _fbb.CreateVector<::flatbuffers::Offset<flatbuffers::Primitive>>(*primitives) : 0;
  return flatbuffers::CreateMesh(
      _fbb,
      primitives__,
      bounds);
}

::flatbuffers::Offset<Mesh> CreateMesh(::flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PrimitiveT *Primitive::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PrimitiveT>(new PrimitiveT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Primitive::UnPackTo(PrimitiveT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = material(); _o->material = _e; }
  { auto _e = vertices(); if (_e) { _o->vertices.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->vertices[_i] = ::flatbuffers::UnPack(*_e->Get(_i)); } } else { _o->vertices.resize(0); } }
  { auto _e = indices(); if (_e) { _o->indices.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->indices.begin()); } }
  { auto _e = index_type(); _o->index_type = _e; }
}

inline ::flatbuffers::Offset<Primitive> Primitive::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PrimitiveT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePrimitive(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Primitive> CreatePrimitive(::flatbuffers::FlatBufferBuilder &_fbb, const PrimitiveT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PrimitiveT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _material = _o->material;
  auto _vertices = _o->vertices.size() ? _fbb.CreateVectorOfNativeStructs<flatbuffers::Vertex, Engine::Vertex>(_o->vertices) : 0;
  auto _indices = _o->indices.size() ? _fbb.CreateVector(_o->indices) : 0;
  auto _index_type = _o->index_type;
  return flatbuffers::CreatePrimitive(
      _fbb,
      _material,
      _vertices,
      _indices,
      _index_type);
}

inline MeshT::MeshT(const MeshT &o)
      : bounds((o.bounds) ? new flatbuffers::AABB(*o.bounds) : nullptr) {
  primitives.reserve(o.primitives.size());
  for (const auto &primitives_ : o.primitives) { primitives.emplace_back((primitives_) ? new flatbuffers::PrimitiveT(*primitives_) : nullptr); }
}

inline MeshT &MeshT::operator=(MeshT o) FLATBUFFERS_NOEXCEPT {
  std::swap(primitives, o.primitives);
  std::swap(bounds, o.bounds);
  return *this;
}

inline MeshT *Mesh::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MeshT>(new MeshT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Mesh::UnPackTo(MeshT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = primitives(); if (_e) { _o->primitives.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->primitives[_i]) { _e->Get(_i)->UnPackTo(_o->primitives[_i].get(), _resolver); } else { _o->primitives[_i] = std::unique_ptr<flatbuffers::PrimitiveT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->primitives.resize(0); } }
  { auto _e = bounds(); if (_e) _o->bounds = std::unique_ptr<flatbuffers::AABB>(new flatbuffers::AABB(*_e)); }
}

inline ::flatbuffers::Offset<Mesh> Mesh::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MeshT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMesh(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Mesh> CreateMesh(::flatbuffers::FlatBufferBuilder &_fbb, const MeshT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MeshT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _primitives = _o->primitives.size() ? _fbb.CreateVector<::flatbuffers::Offset<flatbuffers::Primitive>> (_o->primitives.size(), [](size_t i, _VectorArgs *__va) { return CreatePrimitive(*__va->__fbb, __va->__o->primitives[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _bounds = _o->bounds ? _o->bounds.get() : nullptr;
  return flatbuffers::CreateMesh(
      _fbb,
      _primitives,
      _bounds);
}

inline const flatbuffers::Mesh *GetMesh(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::Mesh>(buf);
}

inline const flatbuffers::Mesh *GetSizePrefixedMesh(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::Mesh>(buf);
}

inline bool VerifyMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::Mesh>(nullptr);
}

inline bool VerifySizePrefixedMeshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::Mesh>(nullptr);
}

inline void FinishMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Mesh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Mesh> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffers::MeshT> UnPackMesh(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MeshT>(GetMesh(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffers::MeshT> UnPackSizePrefixedMesh(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MeshT>(GetSizePrefixedMesh(buf)->UnPack(res));
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_MESH_FLATBUFFERS_H_
