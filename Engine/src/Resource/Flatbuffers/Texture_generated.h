// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace flatbuffers {

struct Mipmap;

struct Texture;
struct TextureBuilder;
struct TextureT;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Mipmap FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t level_;
  uint32_t offset_;
  uint32_t width_;
  uint32_t height_;

 public:
  Mipmap()
      : level_(0),
        offset_(0),
        width_(0),
        height_(0) {
  }
  Mipmap(uint32_t _level, uint32_t _offset, uint32_t _width, uint32_t _height)
      : level_(::flatbuffers::EndianScalar(_level)),
        offset_(::flatbuffers::EndianScalar(_offset)),
        width_(::flatbuffers::EndianScalar(_width)),
        height_(::flatbuffers::EndianScalar(_height)) {
  }
  uint32_t level() const {
    return ::flatbuffers::EndianScalar(level_);
  }
  uint32_t offset() const {
    return ::flatbuffers::EndianScalar(offset_);
  }
  uint32_t width() const {
    return ::flatbuffers::EndianScalar(width_);
  }
  uint32_t height() const {
    return ::flatbuffers::EndianScalar(height_);
  }
};
FLATBUFFERS_STRUCT_END(Mipmap, 16);

struct TextureT : public ::flatbuffers::NativeTable {
  typedef Texture TableType;
  std::vector<uint8_t> data{};
  std::vector<flatbuffers::Mipmap> mipmaps{};
};

struct Texture FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextureT NativeTableType;
  typedef TextureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_MIPMAPS = 6
  };
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  const ::flatbuffers::Vector<const flatbuffers::Mipmap *> *mipmaps() const {
    return GetPointer<const ::flatbuffers::Vector<const flatbuffers::Mipmap *> *>(VT_MIPMAPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyOffset(verifier, VT_MIPMAPS) &&
           verifier.VerifyVector(mipmaps()) &&
           verifier.EndTable();
  }
  TextureT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TextureT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Texture> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TextureBuilder {
  typedef Texture Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Texture::VT_DATA, data);
  }
  void add_mipmaps(::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers::Mipmap *>> mipmaps) {
    fbb_.AddOffset(Texture::VT_MIPMAPS, mipmaps);
  }
  explicit TextureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Texture> CreateTexture(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const flatbuffers::Mipmap *>> mipmaps = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_mipmaps(mipmaps);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Texture> CreateTextureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    const std::vector<flatbuffers::Mipmap> *mipmaps = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  auto mipmaps__ = mipmaps ? _fbb.CreateVectorOfStructs<flatbuffers::Mipmap>(*mipmaps) : 0;
  return flatbuffers::CreateTexture(
      _fbb,
      data__,
      mipmaps__);
}

::flatbuffers::Offset<Texture> CreateTexture(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TextureT *Texture::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TextureT>(new TextureT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Texture::UnPackTo(TextureT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
  { auto _e = mipmaps(); if (_e) { _o->mipmaps.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->mipmaps[_i] = *_e->Get(_i); } } else { _o->mipmaps.resize(0); } }
}

inline ::flatbuffers::Offset<Texture> Texture::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTexture(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Texture> CreateTexture(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TextureT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  auto _mipmaps = _o->mipmaps.size() ? _fbb.CreateVectorOfStructs(_o->mipmaps) : 0;
  return flatbuffers::CreateTexture(
      _fbb,
      _data,
      _mipmaps);
}

inline const flatbuffers::Texture *GetTexture(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::Texture>(buf);
}

inline const flatbuffers::Texture *GetSizePrefixedTexture(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::Texture>(buf);
}

inline bool VerifyTextureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::Texture>(nullptr);
}

inline bool VerifySizePrefixedTextureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::Texture>(nullptr);
}

inline void FinishTextureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Texture> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Texture> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffers::TextureT> UnPackTexture(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::TextureT>(GetTexture(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffers::TextureT> UnPackSizePrefixedTexture(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::TextureT>(GetSizePrefixedTexture(buf)->UnPack(res));
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_
