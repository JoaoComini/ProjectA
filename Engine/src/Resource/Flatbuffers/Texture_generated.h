// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace flatbuffers {

struct Texture;
struct TextureBuilder;
struct TextureT;

struct TextureT : public ::flatbuffers::NativeTable {
  typedef Texture TableType;
  int32_t width = 0;
  int32_t height = 0;
  int32_t component = 0;
  std::vector<uint8_t> image{};
};

struct Texture FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TextureT NativeTableType;
  typedef TextureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_COMPONENT = 8,
    VT_IMAGE = 10
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t component() const {
    return GetField<int32_t>(VT_COMPONENT, 0);
  }
  const ::flatbuffers::Vector<uint8_t> *image() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_IMAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH, 4) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT, 4) &&
           VerifyField<int32_t>(verifier, VT_COMPONENT, 4) &&
           VerifyOffset(verifier, VT_IMAGE) &&
           verifier.VerifyVector(image()) &&
           verifier.EndTable();
  }
  TextureT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TextureT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Texture> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TextureBuilder {
  typedef Texture Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Texture::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Texture::VT_HEIGHT, height, 0);
  }
  void add_component(int32_t component) {
    fbb_.AddElement<int32_t>(Texture::VT_COMPONENT, component, 0);
  }
  void add_image(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> image) {
    fbb_.AddOffset(Texture::VT_IMAGE, image);
  }
  explicit TextureBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Texture> CreateTexture(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t component = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> image = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_image(image);
  builder_.add_component(component);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Texture> CreateTextureDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    int32_t component = 0,
    const std::vector<uint8_t> *image = nullptr) {
  auto image__ = image ? _fbb.CreateVector<uint8_t>(*image) : 0;
  return flatbuffers::CreateTexture(
      _fbb,
      width,
      height,
      component,
      image__);
}

::flatbuffers::Offset<Texture> CreateTexture(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TextureT *Texture::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TextureT>(new TextureT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Texture::UnPackTo(TextureT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
  { auto _e = component(); _o->component = _e; }
  { auto _e = image(); if (_e) { _o->image.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->image.begin()); } }
}

inline ::flatbuffers::Offset<Texture> Texture::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTexture(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Texture> CreateTexture(::flatbuffers::FlatBufferBuilder &_fbb, const TextureT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TextureT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _width = _o->width;
  auto _height = _o->height;
  auto _component = _o->component;
  auto _image = _o->image.size() ? _fbb.CreateVector(_o->image) : 0;
  return flatbuffers::CreateTexture(
      _fbb,
      _width,
      _height,
      _component,
      _image);
}

inline const flatbuffers::Texture *GetTexture(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::Texture>(buf);
}

inline const flatbuffers::Texture *GetSizePrefixedTexture(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::Texture>(buf);
}

inline bool VerifyTextureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::Texture>(nullptr);
}

inline bool VerifySizePrefixedTextureBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::Texture>(nullptr);
}

inline void FinishTextureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Texture> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextureBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Texture> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffers::TextureT> UnPackTexture(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::TextureT>(GetTexture(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffers::TextureT> UnPackSizePrefixedTexture(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::TextureT>(GetSizePrefixedTexture(buf)->UnPack(res));
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_TEXTURE_FLATBUFFERS_H_
