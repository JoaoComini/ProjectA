// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace flatbuffers {

struct Material;
struct MaterialBuilder;
struct MaterialT;

struct MaterialT : public ::flatbuffers::NativeTable {
  typedef Material TableType;
  uint64_t diffuse = 0;
};

struct Material FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaterialT NativeTableType;
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DIFFUSE = 4
  };
  uint64_t diffuse() const {
    return GetField<uint64_t>(VT_DIFFUSE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_DIFFUSE, 8) &&
           verifier.EndTable();
  }
  MaterialT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MaterialT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Material> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MaterialBuilder {
  typedef Material Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_diffuse(uint64_t diffuse) {
    fbb_.AddElement<uint64_t>(Material::VT_DIFFUSE, diffuse, 0);
  }
  explicit MaterialBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Material> CreateMaterial(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t diffuse = 0) {
  MaterialBuilder builder_(_fbb);
  builder_.add_diffuse(diffuse);
  return builder_.Finish();
}

::flatbuffers::Offset<Material> CreateMaterial(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MaterialT *Material::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MaterialT>(new MaterialT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Material::UnPackTo(MaterialT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = diffuse(); _o->diffuse = _e; }
}

inline ::flatbuffers::Offset<Material> Material::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMaterial(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Material> CreateMaterial(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MaterialT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _diffuse = _o->diffuse;
  return flatbuffers::CreateMaterial(
      _fbb,
      _diffuse);
}

inline const flatbuffers::Material *GetMaterial(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::Material>(buf);
}

inline const flatbuffers::Material *GetSizePrefixedMaterial(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::Material>(buf);
}

inline bool VerifyMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::Material>(nullptr);
}

inline bool VerifySizePrefixedMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::Material>(nullptr);
}

inline void FinishMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Material> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Material> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffers::MaterialT> UnPackMaterial(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MaterialT>(GetMaterial(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffers::MaterialT> UnPackSizePrefixedMaterial(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MaterialT>(GetSizePrefixedMaterial(buf)->UnPack(res));
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_
