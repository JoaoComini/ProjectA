// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace flatbuffers {

struct Color;

struct Material;
struct MaterialBuilder;
struct MaterialT;

enum AlphaMode : int8_t {
  AlphaMode_Opaque = 0,
  AlphaMode_Mask = 1,
  AlphaMode_Blend = 2,
  AlphaMode_MIN = AlphaMode_Opaque,
  AlphaMode_MAX = AlphaMode_Blend
};

inline const AlphaMode (&EnumValuesAlphaMode())[3] {
  static const AlphaMode values[] = {
    AlphaMode_Opaque,
    AlphaMode_Mask,
    AlphaMode_Blend
  };
  return values;
}

inline const char * const *EnumNamesAlphaMode() {
  static const char * const names[4] = {
    "Opaque",
    "Mask",
    "Blend",
    nullptr
  };
  return names;
}

inline const char *EnumNameAlphaMode(AlphaMode e) {
  if (::flatbuffers::IsOutRange(e, AlphaMode_Opaque, AlphaMode_Blend)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAlphaMode()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Color FLATBUFFERS_FINAL_CLASS {
 private:
  float value_[4];

 public:
  Color()
      : value_() {
  }
  Color(::flatbuffers::span<const float, 4> _value) {
    ::flatbuffers::CastToArray(value_).CopyFromSpan(_value);
  }
  const ::flatbuffers::Array<float, 4> *value() const {
    return &::flatbuffers::CastToArray(value_);
  }
};
FLATBUFFERS_STRUCT_END(Color, 16);

struct MaterialT : public ::flatbuffers::NativeTable {
  typedef Material TableType;
  uint64_t albedo_texture = 0;
  uint64_t normal_texture = 0;
  uint64_t metallic_roughness_texture = 0;
  std::unique_ptr<flatbuffers::Color> albedo_color{};
  float metallic_factor = 0.0f;
  float roughness_factor = 0.0f;
  flatbuffers::AlphaMode alpha_mode = flatbuffers::AlphaMode_Opaque;
  float alpha_cutoff = 0.0f;
  MaterialT() = default;
  MaterialT(const MaterialT &o);
  MaterialT(MaterialT&&) FLATBUFFERS_NOEXCEPT = default;
  MaterialT &operator=(MaterialT o) FLATBUFFERS_NOEXCEPT;
};

struct Material FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaterialT NativeTableType;
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ALBEDO_TEXTURE = 4,
    VT_NORMAL_TEXTURE = 6,
    VT_METALLIC_ROUGHNESS_TEXTURE = 8,
    VT_ALBEDO_COLOR = 10,
    VT_METALLIC_FACTOR = 12,
    VT_ROUGHNESS_FACTOR = 14,
    VT_ALPHA_MODE = 16,
    VT_ALPHA_CUTOFF = 18
  };
  uint64_t albedo_texture() const {
    return GetField<uint64_t>(VT_ALBEDO_TEXTURE, 0);
  }
  uint64_t normal_texture() const {
    return GetField<uint64_t>(VT_NORMAL_TEXTURE, 0);
  }
  uint64_t metallic_roughness_texture() const {
    return GetField<uint64_t>(VT_METALLIC_ROUGHNESS_TEXTURE, 0);
  }
  const flatbuffers::Color *albedo_color() const {
    return GetStruct<const flatbuffers::Color *>(VT_ALBEDO_COLOR);
  }
  float metallic_factor() const {
    return GetField<float>(VT_METALLIC_FACTOR, 0.0f);
  }
  float roughness_factor() const {
    return GetField<float>(VT_ROUGHNESS_FACTOR, 0.0f);
  }
  flatbuffers::AlphaMode alpha_mode() const {
    return static_cast<flatbuffers::AlphaMode>(GetField<int8_t>(VT_ALPHA_MODE, 0));
  }
  float alpha_cutoff() const {
    return GetField<float>(VT_ALPHA_CUTOFF, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ALBEDO_TEXTURE, 8) &&
           VerifyField<uint64_t>(verifier, VT_NORMAL_TEXTURE, 8) &&
           VerifyField<uint64_t>(verifier, VT_METALLIC_ROUGHNESS_TEXTURE, 8) &&
           VerifyField<flatbuffers::Color>(verifier, VT_ALBEDO_COLOR, 4) &&
           VerifyField<float>(verifier, VT_METALLIC_FACTOR, 4) &&
           VerifyField<float>(verifier, VT_ROUGHNESS_FACTOR, 4) &&
           VerifyField<int8_t>(verifier, VT_ALPHA_MODE, 1) &&
           VerifyField<float>(verifier, VT_ALPHA_CUTOFF, 4) &&
           verifier.EndTable();
  }
  MaterialT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MaterialT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Material> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MaterialBuilder {
  typedef Material Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_albedo_texture(uint64_t albedo_texture) {
    fbb_.AddElement<uint64_t>(Material::VT_ALBEDO_TEXTURE, albedo_texture, 0);
  }
  void add_normal_texture(uint64_t normal_texture) {
    fbb_.AddElement<uint64_t>(Material::VT_NORMAL_TEXTURE, normal_texture, 0);
  }
  void add_metallic_roughness_texture(uint64_t metallic_roughness_texture) {
    fbb_.AddElement<uint64_t>(Material::VT_METALLIC_ROUGHNESS_TEXTURE, metallic_roughness_texture, 0);
  }
  void add_albedo_color(const flatbuffers::Color *albedo_color) {
    fbb_.AddStruct(Material::VT_ALBEDO_COLOR, albedo_color);
  }
  void add_metallic_factor(float metallic_factor) {
    fbb_.AddElement<float>(Material::VT_METALLIC_FACTOR, metallic_factor, 0.0f);
  }
  void add_roughness_factor(float roughness_factor) {
    fbb_.AddElement<float>(Material::VT_ROUGHNESS_FACTOR, roughness_factor, 0.0f);
  }
  void add_alpha_mode(flatbuffers::AlphaMode alpha_mode) {
    fbb_.AddElement<int8_t>(Material::VT_ALPHA_MODE, static_cast<int8_t>(alpha_mode), 0);
  }
  void add_alpha_cutoff(float alpha_cutoff) {
    fbb_.AddElement<float>(Material::VT_ALPHA_CUTOFF, alpha_cutoff, 0.0f);
  }
  explicit MaterialBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Material> CreateMaterial(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t albedo_texture = 0,
    uint64_t normal_texture = 0,
    uint64_t metallic_roughness_texture = 0,
    const flatbuffers::Color *albedo_color = nullptr,
    float metallic_factor = 0.0f,
    float roughness_factor = 0.0f,
    flatbuffers::AlphaMode alpha_mode = flatbuffers::AlphaMode_Opaque,
    float alpha_cutoff = 0.0f) {
  MaterialBuilder builder_(_fbb);
  builder_.add_metallic_roughness_texture(metallic_roughness_texture);
  builder_.add_normal_texture(normal_texture);
  builder_.add_albedo_texture(albedo_texture);
  builder_.add_alpha_cutoff(alpha_cutoff);
  builder_.add_roughness_factor(roughness_factor);
  builder_.add_metallic_factor(metallic_factor);
  builder_.add_albedo_color(albedo_color);
  builder_.add_alpha_mode(alpha_mode);
  return builder_.Finish();
}

::flatbuffers::Offset<Material> CreateMaterial(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MaterialT::MaterialT(const MaterialT &o)
      : albedo_texture(o.albedo_texture),
        normal_texture(o.normal_texture),
        metallic_roughness_texture(o.metallic_roughness_texture),
        albedo_color((o.albedo_color) ? new flatbuffers::Color(*o.albedo_color) : nullptr),
        metallic_factor(o.metallic_factor),
        roughness_factor(o.roughness_factor),
        alpha_mode(o.alpha_mode),
        alpha_cutoff(o.alpha_cutoff) {
}

inline MaterialT &MaterialT::operator=(MaterialT o) FLATBUFFERS_NOEXCEPT {
  std::swap(albedo_texture, o.albedo_texture);
  std::swap(normal_texture, o.normal_texture);
  std::swap(metallic_roughness_texture, o.metallic_roughness_texture);
  std::swap(albedo_color, o.albedo_color);
  std::swap(metallic_factor, o.metallic_factor);
  std::swap(roughness_factor, o.roughness_factor);
  std::swap(alpha_mode, o.alpha_mode);
  std::swap(alpha_cutoff, o.alpha_cutoff);
  return *this;
}

inline MaterialT *Material::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MaterialT>(new MaterialT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Material::UnPackTo(MaterialT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = albedo_texture(); _o->albedo_texture = _e; }
  { auto _e = normal_texture(); _o->normal_texture = _e; }
  { auto _e = metallic_roughness_texture(); _o->metallic_roughness_texture = _e; }
  { auto _e = albedo_color(); if (_e) _o->albedo_color = std::unique_ptr<flatbuffers::Color>(new flatbuffers::Color(*_e)); }
  { auto _e = metallic_factor(); _o->metallic_factor = _e; }
  { auto _e = roughness_factor(); _o->roughness_factor = _e; }
  { auto _e = alpha_mode(); _o->alpha_mode = _e; }
  { auto _e = alpha_cutoff(); _o->alpha_cutoff = _e; }
}

inline ::flatbuffers::Offset<Material> Material::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMaterial(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Material> CreateMaterial(::flatbuffers::FlatBufferBuilder &_fbb, const MaterialT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MaterialT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _albedo_texture = _o->albedo_texture;
  auto _normal_texture = _o->normal_texture;
  auto _metallic_roughness_texture = _o->metallic_roughness_texture;
  auto _albedo_color = _o->albedo_color ? _o->albedo_color.get() : nullptr;
  auto _metallic_factor = _o->metallic_factor;
  auto _roughness_factor = _o->roughness_factor;
  auto _alpha_mode = _o->alpha_mode;
  auto _alpha_cutoff = _o->alpha_cutoff;
  return flatbuffers::CreateMaterial(
      _fbb,
      _albedo_texture,
      _normal_texture,
      _metallic_roughness_texture,
      _albedo_color,
      _metallic_factor,
      _roughness_factor,
      _alpha_mode,
      _alpha_cutoff);
}

inline const flatbuffers::Material *GetMaterial(const void *buf) {
  return ::flatbuffers::GetRoot<flatbuffers::Material>(buf);
}

inline const flatbuffers::Material *GetSizePrefixedMaterial(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatbuffers::Material>(buf);
}

inline bool VerifyMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::Material>(nullptr);
}

inline bool VerifySizePrefixedMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatbuffers::Material>(nullptr);
}

inline void FinishMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Material> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatbuffers::Material> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<flatbuffers::MaterialT> UnPackMaterial(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MaterialT>(GetMaterial(buf)->UnPack(res));
}

inline std::unique_ptr<flatbuffers::MaterialT> UnPackSizePrefixedMaterial(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<flatbuffers::MaterialT>(GetSizePrefixedMaterial(buf)->UnPack(res));
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_MATERIAL_FLATBUFFERS_H_
